
defaults: &defaults
  docker:
    - image: circleci/node:13.8.0
# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  print_pipeline_id:
      description: "Using command to print the pipeline ID"
      steps:
        - run: echo "the pipeline Id is $CIRCLE_WORKFLOW_ID "
  destroy_environment:
     steps:
       - run:
           name: Destroy environment
           # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
           # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
           when: on_fail
           command: |
             aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1
#            yum install -y tar gzip
#      - run:
#          name: "output ip in inventory.txt"
#          command: |
#            echo "[all]" > ~/inventory.txt
#            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ~/inventory.txt
#      - persist_to_workspace:
#          root: ~/
#          paths:
#            - inventory.txt

  configure_infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
#      - attach_workspace:
#          at: ~/
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
          fingerprints: ["23:24:49:13:1b:30:35:ca:53:53:a7:a6:c3:44:ac:35"] 
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i inventory.txt main-remote.yml

  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            URL="https://blog.udacity.com/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 1
            else
              return 1
            fi
      - destroy_environment
  save-helloworld-output:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    <<: *defaults
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Save hello world in an output file"
          command: echo "Hello, World!" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt
      - print_pipeline_id

  print-helloworld-output:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    <<: *defaults
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: "Print hello world in the output file"
          command: cat ~/output.txt
      - print_pipeline_id

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  save-hello-workflow:
    jobs:
      - create_infrastructure
      #- configure_infrastructure
      #    requires:
      #      - create_infrastructure
      #- save-helloworld-output:
      #    requires:
      #      - create_infrastructure
      #- print-helloworld-output:
      #    requires:
      #      - save-helloworld-output
      - smoke_test:
          requires:
            - create_infrastructure

